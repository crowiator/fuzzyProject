# preprocessing/load.py
import wfdb
from collections import Counter

EXCLUDED_ANNOTATIONS = {
    "+", "~", "|", "Q", "/", "f", "x", "\""
}



def load_mitbih_record(record_name, path="./data/mit/"):
    """
    Naƒç√≠ta EKG z√°znam z MIT-BIH datab√°zy a vr√°ti len validn√© √∫dery na z√°klade anot√°ci√≠.

    Vr√°ten√©:
    - signal: 1D pole p√¥vodn√©ho EKG sign√°lu (obsahuje aj nevalidn√© √∫dery ‚Äì nefiltruje sa)
    - fs: vzorkovacia frekvencia
    - filtered_r_peak_positions: poz√≠cie R-vƒ∫n platn√Ωch √∫derov
    - filtered_beat_types: typy t√Ωchto √∫derov (napr. 'N', 'V', 'A', ...)
    - beat_counts: poƒçet v√Ωskytov jednotliv√Ωch platn√Ωch typov √∫derov
    - annotation: p√¥vodn√© anot√°cie (kompletn√©, ak treba pre ƒèal≈°iu anal√Ωzu)
    """
    try:
        record = wfdb.rdrecord(f"{path}{record_name}")
        annotation = wfdb.rdann(f"{path}{record_name}", 'atr')
        fs = record.fs
        leads = record.sig_name
        print(record.units)

        # Naƒç√≠tanie sign√°lu z prv√©ho kan√°la
        if hasattr(record, "p_signal") and record.p_signal is not None:
            if record.p_signal.ndim == 2:
                signal = record.p_signal[:, 0]
            else:
                signal = record.p_signal
        else:
            raise ValueError("record.p_signal je None alebo neexistuje")

        # Filtrovanie len validn√Ωch √∫derov
        all_r_peak_positions = annotation.sample
        all_beat_types = annotation.symbol

        filtered_r_peak_positions = []
        filtered_beat_types = []

        for r_pos, b_type in zip(all_r_peak_positions, all_beat_types):
            if b_type not in EXCLUDED_ANNOTATIONS:
                filtered_r_peak_positions.append(r_pos)
                filtered_beat_types.append(b_type)

        beat_counts = Counter(filtered_beat_types)

        return signal, fs, filtered_r_peak_positions, filtered_beat_types, beat_counts, annotation

    except Exception as e:
        print(f"‚ùå Error loading record {record_name}: {e}")
        return None, None, None, None, None

def summarize_loaded_beat_counts(all_beat_counts_by_record):
    """
    all_beat_counts_by_record: dict[str, Counter]
        kƒæ√∫ƒç = n√°zov z√°znamu, hodnota = Counter validn√Ωch beat typov
    """
    from collections import Counter

    total_counter = Counter()

    for record_name, counter in all_beat_counts_by_record.items():
        total_counter.update(counter)

    print("‚úÖ S√∫hrn validn√Ωch √∫derov zo v≈°etk√Ωch z√°znamov:")
    for b_type, count in total_counter.items():
        print(f"üîπ √öder '{b_type}': {count} v√Ωskytov")

    return total_counter