# preprocessing/filtering.py
import numpy as np
import pywt
from scipy.signal import butter, filtfilt


def lowpass_filter(signal, fs, cutoff=30, order=4):
    """
    Butterworth low-pass filter na odstr√°nenie vysokofrekvenƒçn√©ho ≈°umu.
    Pou≈æ√≠va Butterworthov dolnopriepustn√Ω filter, ktor√Ω prepust√≠ len frekvencie ni≈æ≈°ie ako 30 Hz.

üîç Na ƒço je dobr√Ω:
	‚Ä¢	Odstra≈àuje vysokofrekvenƒçn√Ω ≈°um (napr. EMG ‚Äì svalov√Ω ≈°um, elektrick√© ru≈°enie).
	‚Ä¢	Zachov√°va T-vlny (1‚Äì10 Hz) aj QRS komplexy (~15 Hz).
	Order 4 je ≈°tandardn√© odpor√∫ƒçanie v kardiologickom sign√°lnom spracovan√≠,
preto≈æe poskytuje dobr√∫ potlaƒçenie ≈°umu bez naru≈°enia EKG morfol√≥gie.
    """
    #Nyquistova frekvencia = polovica vzorkovacej frekvencie fs
    #Aby si spr√°vne zachytil (zrekon≈°truoval) sign√°l, mus√≠≈° ho vzorkova≈• aspo≈à 2√ó r√Ωchlej≈°ie, ne≈æ je jeho najvy≈°≈°ia frekvencia.
    nyquist = 0.5 * fs
    #Digit√°lne filtre (napr. butter()) nechc√∫ prah v Hz, ale v pomere k Nyquistovej frekvencii
    normal_cutoff = cutoff / nyquist
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return filtfilt(b, a, signal)


def dwt_filtering(ecg_signal, wavelet='db4', threshold_factor=0.2):
    """
    DWT-based baseline wander removal s m√§kk√Ωm thresholdingom.
    Pou≈æ√≠va automatick√∫ detekciu maxim√°lnej √∫rovne (max level = 5).
    """
    level = pywt.dwt_max_level(len(ecg_signal), pywt.Wavelet('db4').dec_len)
    level = min(level, 5)
    coeffs = pywt.wavedec(ecg_signal, wavelet, level=level)

    # V√Ωpoƒçet univerz√°lneho prahu (Donoho)
    sigma = np.median(np.abs(coeffs[-1])) / 0.6745
    threshold = threshold_factor * sigma

    # Soft thresholding pre aproxim√°ciu
    coeffs[0] = pywt.threshold(coeffs[0], threshold, mode='soft')

    # Namiesto √∫pln√©ho odstr√°nenia detailov ich oslab√≠me len o 30% (miernej≈°ia filtr√°cia)
    for i in range(1, 4):
        coeffs[i] *= 0.7

    # Rekon≈°trukcia sign√°lu pomocou IDWT
    filtered_signal = pywt.waverec(coeffs, wavelet)

    return filtered_signal[:len(ecg_signal)]


def normalize_zscore(signal):
    """
        Z-sk√≥rov√° normaliz√°cia EKG sign√°lu.
    """
    if np.std(signal) == 0:
        return signal
    return (signal - np.mean(signal)) / np.std(signal)


def normalize_minmax(signal, range_min=-1, range_max=1):
    """
        Normaliz√°cia sign√°lu do zadan√©ho rozsahu (default: -1 a≈æ 1).
    """
    return (signal - np.min(signal)) / (np.max(signal) - np.min(signal)) * (range_max - range_min) + range_min


# ----------------------------------------------------------------

